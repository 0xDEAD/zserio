package zserio.ast;

import java.util.ArrayList;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;

import zserio.antlr.ZserioParserTokenTypes;
import zserio.antlr.util.BaseTokenAST;
import zserio.antlr.util.ParserException;
import zserio.ast.doc.DocCommentToken;
import zserio.tools.HashUtil;

/**
 * AST node for constant types.
 *
 * Constant types are Zserio types as well.
 */
public class ConstType extends TokenAST implements ZserioType, Comparable<ConstType>
{
    @Override
    public String getName()
    {
        return name;
    }

    @Override
    public Package getPackage()
    {
        return pkg;
    }

    @Override
    public Iterable<ZserioType> getUsedTypeList()
    {
        return usedTypeList;
    }

    @Override
    public void callVisitor(ZserioTypeVisitor visitor)
    {
        visitor.visitConstType(this);
    }

    @Override
    public int compareTo(ConstType other)
    {
        return getName().compareTo(other.getName());
    }

    @Override
    public boolean equals(Object other)
    {
        if ( !(other instanceof ConstType) )
            return false;

        return (this == other) || compareTo((ConstType)other) == 0;
    }

    @Override
    public int hashCode()
    {
        int hash = HashUtil.HASH_SEED;
        hash = HashUtil.hash(hash, getName());
        return hash;
    }

    /**
     * Sets package for the constant type.
     *
     * This method is called by code generated by ANTLR using TypeEvaluator.g.
     *
     * @param pkg   Package to set.
     */
    public void setPackage(Package pkg)
    {
        this.pkg = pkg;
    }

    /**
     * Gets unresolved const Zserio type.
     *
     * @return Unresolved const Zserio type.
     */
    public ZserioType getConstType()
    {
        return constType;
    }

    /**
     * Gets expression which represents constant value.
     *
     * @return Constant value expression.
     */
    public Expression getValueExpression()
    {
        return valueExpression;
    }

    /**
     * Gets list of compound types which use this constant type.
     *
     * @return List of compound types which use this constant type.
     */
    public Iterable<CompoundType> getUsedByCompoundList()
    {
        return usedByCompoundList;
    }

    /**
     * Gets documentation comment associated to this constant type.
     *
     * @return Documentation comment token associated to this constant type.
     */
    public DocCommentToken getDocComment()
    {
        return getHiddenDocComment();
    }

    @Override
    protected boolean evaluateChild(BaseTokenAST child) throws ParserException
    {
        if (child instanceof Expression && valueExpression == null)
        {
            valueExpression = (Expression)child;
        }
        else
        {
            switch (child.getType())
            {
            case ZserioParserTokenTypes.ID:
                name = child.getText();
                break;

            default:
                if (constType != null || !(child instanceof ZserioType))
                    return false;
                constType = (ZserioType)child;
                break;
            }
        }

        return true;
    }

    @Override
    protected void evaluate() throws ParserException
    {
        evaluateHiddenDocComment(this);
    }

    @Override
    protected void check() throws ParserException
    {
        // fill used type list
        final ZserioType resolvedTypeReference = TypeReference.resolveType(constType);
        if (!ZserioTypeUtil.isBuiltIn(resolvedTypeReference))
            usedTypeList.add(resolvedTypeReference);

        // add this const to 'Used-by' list for subtype type (needed by documentation emitter)
        if (resolvedTypeReference instanceof Subtype)
            ((Subtype)resolvedTypeReference).setUsedByConst(this);

        final ZserioType baseType = TypeReference.resolveBaseType(resolvedTypeReference);

        // check base type
        if (!ZserioTypeUtil.isBuiltIn(baseType) && !(baseType instanceof EnumType))
            throw new ParserException(this, "Constants can be defined only for built-in types and enums!");

        // check expression type
        ExpressionUtil.checkExpressionType(valueExpression, baseType);

        // check integer constant range
        ExpressionUtil.checkIntegerExpressionRange(valueExpression, baseType, name);
    }

    /**
     * Sets expression which uses this constant type.
     *
     * @param expression Expression to set.
     */
    protected void setUsedByExpression(Expression expression)
    {
        final ZserioType ownerType = expression.getScope().getOwner();
        if (ownerType != null && ownerType instanceof CompoundType)
            usedByCompoundList.add((CompoundType)ownerType);
    }

    private Package pkg;

    private ZserioType constType;
    private String name;
    private Expression valueExpression;

    private final SortedSet<CompoundType> usedByCompoundList = new TreeSet<CompoundType>();
    private final List<ZserioType> usedTypeList = new ArrayList<ZserioType>();

    private static final long serialVersionUID = -3110481568764967859L;
}
